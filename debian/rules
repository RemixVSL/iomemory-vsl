#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper.
#
# This file was originally written by Joey Hess and Craig Small.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.
# This special exception was added by Craig Small in version 0.37 of dh-make.
#
# Modified to make a template file for a multi-binary package with separated
# build-arch and build-indep targets  by Bill Allombert 2001

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# This has to be exported to make some magic below work.
export DH_OPTIONS

ifneq (1,$(words $(CURDIR)))
$(error Building from a directory that contains spaces in the path is not supported - please move this build tree appropriately)
endif

empty  :=
space  := $(empty) $(empty)
curdir := $(subst $(space),\$(space),$(CURDIR))

include $(curdir)/debian/fio_values


deb_kernel_version          ?= $(shell uname -r)
deb_nice_kernel_version     := $(subst -,_,$(deb_kernel_version))

ifdef fio_shipped_object
firehose_shipped_object     := FIREHOSE_SHIPPED_OBJECT=$(fio_shipped_object)
endif


install.files = $(wildcard $(curdir)/debian/*.install)

# NOTE: Here is some hackery that adds the kernel version to the driver
# "Package:" name in the control file.  Even though dpkg-gencontrol allows
# templating/substitution in the control file, it does not allow
# substitution in Package, Source and Architecture since the substitutions
# are not guaranteed to run *prior* to them being needed by other tools.
# The next three rules have some "magic" to get around that limitation.
#
# Keep these in mind:
#
#   1) The control file must be generated before everything else - that is
#   why it is a dependency to the "configure-stamp" target.
#
#   2) While it would be nice to use a debian/control.in with convenient
#   keys that get replaced, that breaks the use of dpkg-buildpackage and
#   debuild which check debian/control prior to actually invoking the
#   build.  This means that we need debian/control te pre-exist so it gets
#   modified in-place.  We depend on the behavior of dpkg-buildpackage of
#   *not* caring about the "Package:" fields and that they get modified
#   (this might not work if "Source:" or "Build-Depends:" needed to be
#   modified).
#
#   3) Since the target of generating "debian/control" will be circularly
#   dependent on itself, make will never fire the rule.  It must be forced
#   to fire each time make is invoked.

# The "FORCE" target causes anything that depends on it to build *every*
# time.  That means *every* rule in this package will rebuild everytime.
# Right now that is not too bad since this is a quick build.
FORCE: ;

# The in-place modification that adds the kernel version.
debian/control: FORCE
	sed -r -i -e 's/^Package: $(fio_driver_name)(-config|-di|-initrd)?(-[.0-9]+.*)*$$/Package: $(fio_driver_name)\1-$(deb_kernel_version)/;' $@
	-set -e; \
	for file in $(CURDIR)/debian/$(fio_driver_name).* $(CURDIR)/debian/$(fio_driver_name)-di.* $(CURDIR)/debian/$(fio_driver_name)-initrd.*; do \
		new_file=$$(echo $$file | sed -r -e -E 's/$(fio_driver_name)(-config|-di|-initrd)?\./$(fio_driver_name)\1-$(deb_kernel_version)./;'); \
		cp "$$file" "$$new_file"; \
	done
	# Add the kernel version to our UEFI Ubuntu driver injection disk
	sed -r -i -e 's/^XB-Kernel-Version:.*/XB-Kernel-Version: $(deb_kernel_version)/;' $@
	cp -r $(CURDIR)/debian/$(fio_driver_name).postinst "$(CURDIR)/debian/$(fio_driver_name)-$(deb_kernel_version).postinst"
	echo depmod $(deb_kernel_version) >> "$(CURDIR)/debian/$(fio_driver_name)-$(deb_kernel_version).postinst"
	cp -r $(CURDIR)/debian/$(fio_driver_name).postrm "$(CURDIR)/debian/$(fio_driver_name)-$(deb_kernel_version).postrm"
	cp -r $(CURDIR)/debian/$(fio_driver_name).prerm "$(CURDIR)/debian/$(fio_driver_name)-$(deb_kernel_version).prerm"
	echo depmod $(deb_kernel_version) >> "$(CURDIR)/debian/$(fio_driver_name)-$(deb_kernel_version).postrm"

configure: configure-stamp
configure-stamp: debian/control
	dh_testdir
	# Add here commands to configure the package.

	touch configure-stamp


#Architecture
build: build-arch

build-arch: build-arch-stamp
build-arch-stamp: configure-stamp

	# Add here commands to compile the arch part of the package.
	rsync -a --delete ./root/$(fio_sourcedir)/$(fio_driver_name)-$(fio_short_version)/ driver_source/

	if ! $(MAKE) \
		-C driver_source \
		KERNELVER=$(deb_kernel_version) \
		FIO_DRIVER_NAME=$(fio_driver_name) \
		$(firehose_shipped_object) \
		modules; then \
		printf "ERROR:\n"; \
		exit 1; \
	fi
	$(CURDIR)/driver_source/module_operations.sh -n ${fio_driver_name}
	touch $@

clean:
	dh_testdir
	dh_testroot
	rm -f build-arch-stamp configure-stamp

	# Add here commands to clean up after the build process.
	#$(MAKE) clean
	-rm -rf \
		"$(CURDIR)/driver_source" \
		"$(CURDIR)/debian/fio" \
		"$(CURDIR)/debian/$(fio_driver_name)-$(deb_kernel_version)"* \
		"$(CURDIR)/debian/$(fio_driver_name)-$(deb_kernel_version)"*

	sed -r -i -e 's/^Package: $(fio_driver_name)(-config)?(-[.0-9]+.*)*$$/Package: $(fio_driver_name)\1/;' debian/control

	dh_prep

install: install-arch

install-arch: $(install.files)
	dh_testdir
	dh_testroot
	dh_prep
	dh_installdirs -a

	# Add here commands to install the arch part of the package into
	# debian/tmp.0
  # dh_missing --sourcedir=root --fail-missing -X$(fio_docdir)/$(fio_driver_name)
	# dh_missing --sourcedir=root --fail-missing $(fio_docdir)/$(fio_driver_name) \
	#                           								 $(fio_docdir)/$(fio_driver_name)-$(deb_kernel_version)
	dh_install --sourcedir=root -X$(fio_docdir)/$(fio_driver_name)
	dh_install --sourcedir=root $(fio_docdir)/$(fio_driver_name) \
	                            $(fio_docdir)/$(fio_driver_name)-$(deb_kernel_version)

	mkdir -p $(CURDIR)/debian/$(fio_driver_name)-$(deb_kernel_version)/usr/lib/fio
	mkdir -p $(CURDIR)/debian/$(fio_driver_name)-$(deb_kernel_version)/usr/share/doc
	mkdir -p $(CURDIR)/debian/$(fio_driver_name)-$(deb_kernel_version)/etc
	cp -r root/usr/lib/fio/* "$(CURDIR)/debian/$(fio_driver_name)-$(deb_kernel_version)/usr/lib/fio/"
	cp -r root/usr/share/doc/* "$(CURDIR)/debian/$(fio_driver_name)-$(deb_kernel_version)/usr/share/doc/"
	cp -r root/etc/* "$(CURDIR)/debian/$(fio_driver_name)-$(deb_kernel_version)/etc/"
	mkdir -p "$(CURDIR)/debian/$(fio_driver_name)-$(deb_kernel_version)/lib/modules/$(deb_kernel_version)/extra/$(fio_oem_name_short)"
	cp driver_source/$(fio_driver_name).ko \
		"$(CURDIR)/debian/$(fio_driver_name)-$(deb_kernel_version)/lib/modules/$(deb_kernel_version)/extra/$(fio_oem_name_short)"

	mkdir -p "$(CURDIR)/debian/$(fio_driver_name)-config-$(deb_kernel_version)$(fio_sourcedir)/$(fio_driver_name)-$(fio_short_version)/include/fio/port/linux"

	cp "driver_source/Module.symvers" \
		"$(CURDIR)/debian/$(fio_driver_name)-config-$(deb_kernel_version)$(fio_sourcedir)/$(fio_driver_name)-$(fio_short_version)/"

	cp "driver_source/include/fio/port/linux/kfio_config.h" \
		"$(CURDIR)/debian/$(fio_driver_name)-config-$(deb_kernel_version)$(fio_sourcedir)/$(fio_driver_name)-$(fio_short_version)/include/fio/port/linux/"

	mkdir -p "$(CURDIR)/debian/$(fio_driver_name)-di-$(deb_kernel_version)/lib/modules/$(deb_kernel_version)/extra/$(fio_driver_name)"
	cp driver_source/$(fio_driver_name).ko \
		"$(CURDIR)/debian/$(fio_driver_name)-di-$(deb_kernel_version)/lib/modules/$(deb_kernel_version)/extra/$(fio_driver_name).ko"

	mkdir -p "$(CURDIR)/debian/$(fio_driver_name)-initrd-$(deb_kernel_version)/usr/share/initramfs-tools/modules.d"
	cp driver_source/$(fio_driver_name).ko \
		"$(CURDIR)/debian/$(fio_driver_name)-initrd-$(deb_kernel_version)/usr/share/initramfs-tools/modules.d"
	echo $(fio_driver_name) > $(CURDIR)/debian/$(fio_driver_name)-initrd-$(deb_kernel_version)/usr/share/initramfs-tools/modules.d/$(fio_driver_name).ko

# Must not depend on anything. This is to be called by
# binary-arch
# in another 'make' thread.
binary-common:
	dh_testdir
	dh_testroot
	dh_installchangelogs
	dh_installdocs
	dh_installexamples
#	dh_installmenu
#	dh_installdebconf
#	dh_installlogrotate
#	dh_installemacsen
#	dh_installpam
#	dh_installmime
#	dh_python
#	dh_installinit
#	dh_installcron
#	dh_installinfo
	dh_installman
	dh_link
	dh_strip
	dh_compress
	dh_fixperms
#	dh_perl
	dh_makeshlibs
	dh_installdeb

	dh_installmodules

	dh_gencontrol -- -Vfio-version=$(fio_version)
	dh_md5sums
	dh_builddeb

# Build architecture dependant packages using the common target.
binary-arch: build-arch install-arch
	$(MAKE) -f debian/rules DH_OPTIONS=-a binary-common

binary: binary-arch
.PHONY: FORCE build clean binary-arch binary install install-arch configure
